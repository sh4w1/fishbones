import sys
from typing import List, Optional, SupportsInt, Union

from .integer import IntVar, IntType, uint8

if sys.version_info >= (3, 8):
    from typing import Literal
else:
    from typing_extensions import Literal

class VirtualPointer:

    _data_type: IntType

    source: bytearray
    byteorder: Literal["little", "big"]
    offset: int

    def __init__(
        self,
        source: bytearray,
        data_type: Union[IntType, str] = uint8,
        byteorder: Literal["little", "big"] = "little",
        offset: int = 0,
    ): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    @property
    def data_type(self) -> IntType: ...
    @data_type.setter
    def data_type(self, type_or_name: Union[IntType, str]): ...
    def copy(self) -> "VirtualPointer": ...
    def add(self, num: int) -> "VirtualPointer": ...
    def sub(self, num: int) -> "VirtualPointer": ...
    def cast(self, data_type: Union[IntType, str]) -> "VirtualPointer": ...
    def read_bytes(self, size: int) -> bytes: ...
    def write_bytes(self, data: Union[bytes, bytearray, List[SupportsInt]]): ...
    def read(self) -> IntVar: ...
    def write(self, value: SupportsInt): ...

def vptr(
    source: bytearray,
    data_type: Union[IntType, str] = uint8,
    byteorder: Literal["little", "big"] = "little",
) -> VirtualPointer: ...
