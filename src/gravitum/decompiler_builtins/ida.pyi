from typing import Type, TypeVar

from ..integer import (
    IntType,
    IntVar,
    int8,
    int16,
    int32,
    int64,
    uint8,
    uint16,
    uint32,
    uint64,
)

_T = TypeVar("_T", int8, int16, int32, int64, uint8, uint16, uint32, uint64)

def truncate(x: IntVar, c: int, to_type: Type[_T]) -> _T: ...
def last_ind(x: IntVar, part_type: IntType) -> int: ...
def low_ind(x: IntVar, part_type: IntType) -> int: ...
def high_ind(x: IntVar, part_type: IntType) -> int: ...
def byten(x: IntVar, n: int) -> uint8: ...
def wordn(x: IntVar, n: int) -> uint16: ...
def dwordn(x: IntVar, n: int) -> uint32: ...
def lobyte(x: IntVar) -> uint8: ...
def loword(x: IntVar) -> uint16: ...
def lodword(x: IntVar) -> uint32: ...
def hibyte(x: IntVar) -> uint8: ...
def hiword(x: IntVar) -> uint16: ...
def hidword(x: IntVar) -> uint32: ...
def byte1(x: IntVar) -> uint8: ...
def byte2(x: IntVar) -> uint8: ...
def byte3(x: IntVar) -> uint8: ...
def byte4(x: IntVar) -> uint8: ...
def byte5(x: IntVar) -> uint8: ...
def byte6(x: IntVar) -> uint8: ...
def byte7(x: IntVar) -> uint8: ...
def byte8(x: IntVar) -> uint8: ...
def byte9(x: IntVar) -> uint8: ...
def byte10(x: IntVar) -> uint8: ...
def byte11(x: IntVar) -> uint8: ...
def byte12(x: IntVar) -> uint8: ...
def byte13(x: IntVar) -> uint8: ...
def byte14(x: IntVar) -> uint8: ...
def byte15(x: IntVar) -> uint8: ...
def word1(x: IntVar) -> uint16: ...
def word2(x: IntVar) -> uint16: ...
def word3(x: IntVar) -> uint16: ...
def word4(x: IntVar) -> uint16: ...
def word5(x: IntVar) -> uint16: ...
def word6(x: IntVar) -> uint16: ...
def word7(x: IntVar) -> uint16: ...
def dword1(x: IntVar) -> uint32: ...
def dword2(x: IntVar) -> uint32: ...
def dword3(x: IntVar) -> uint32: ...
def sbyten(x: IntVar, n: int) -> int8: ...
def swordn(x: IntVar, n: int) -> int16: ...
def sdwordn(x: IntVar, n: int) -> int32: ...
def slobyte(x: IntVar) -> int8: ...
def sloword(x: IntVar) -> int16: ...
def slodword(x: IntVar) -> int32: ...
def shibyte(x: IntVar) -> int8: ...
def shiword(x: IntVar) -> int16: ...
def shidword(x: IntVar) -> int32: ...
def sbyte1(x: IntVar) -> int8: ...
def sbyte2(x: IntVar) -> int8: ...
def sbyte3(x: IntVar) -> int8: ...
def sbyte4(x: IntVar) -> int8: ...
def sbyte5(x: IntVar) -> int8: ...
def sbyte6(x: IntVar) -> int8: ...
def sbyte7(x: IntVar) -> int8: ...
def sbyte8(x: IntVar) -> int8: ...
def sbyte9(x: IntVar) -> int8: ...
def sbyte10(x: IntVar) -> int8: ...
def sbyte11(x: IntVar) -> int8: ...
def sbyte12(x: IntVar) -> int8: ...
def sbyte13(x: IntVar) -> int8: ...
def sbyte14(x: IntVar) -> int8: ...
def sbyte15(x: IntVar) -> int8: ...
def sword1(x: IntVar) -> int16: ...
def sword2(x: IntVar) -> int16: ...
def sword3(x: IntVar) -> int16: ...
def sword4(x: IntVar) -> int16: ...
def sword5(x: IntVar) -> int16: ...
def sword6(x: IntVar) -> int16: ...
def sword7(x: IntVar) -> int16: ...
def sdword1(x: IntVar) -> int32: ...
def sdword2(x: IntVar) -> int32: ...
def sdword3(x: IntVar) -> int32: ...
def pair(high: IntVar, low: IntVar) -> IntVar: ...
def rol(value: IntVar, count: int) -> IntVar: ...
def rol1(value: uint8, count: int) -> uint8: ...
def rol2(value: uint16, count: int) -> uint16: ...
def rol4(value: uint32, count: int) -> uint32: ...
def rol8(value: uint64, count: int) -> uint64: ...
def ror1(value: uint8, count: int) -> uint8: ...
def ror2(value: uint16, count: int) -> uint16: ...
def ror4(value: uint32, count: int) -> uint32: ...
def ror8(value: uint64, count: int) -> uint64: ...
def mkcshl(value: IntVar, count: int) -> int: ...
def mkcshr(value: IntVar, count: int) -> int: ...
def sets(x: IntVar) -> int: ...
def ofsub(x: IntVar, y: IntVar) -> int: ...
def ofadd(x: IntVar, y: IntVar) -> int: ...
def cfsub(x: IntVar, y: IntVar) -> int: ...
def cfadd(x: IntVar, y: IntVar) -> int: ...
def swap_bytes(x: _T) -> _T: ...
def bswap16(x: uint16) -> uint16: ...
def bswap32(x: uint32) -> uint32: ...
def bswap64(x: uint64) -> uint64: ...
def clz(x: IntVar) -> int: ...
